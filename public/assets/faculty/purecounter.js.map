{"version":3,"file":"/dist/purecounter.js","mappings":"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","sources":["webpack://PureCounter/webpack/universalModuleDefinition","webpack://PureCounter/./js/purecounter.js","webpack://PureCounter/./purecounter.js","webpack://PureCounter/webpack/bootstrap","webpack://PureCounter/webpack/runtime/define property getters","webpack://PureCounter/webpack/runtime/hasOwnProperty shorthand","webpack://PureCounter/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PureCounter\"] = factory();\n\telse\n\t\troot[\"PureCounter\"] = factory();\n})(self, function() {\nreturn ","export default class PureCounter {\r\n\tconstructor(options = {}) {\r\n\t\t/** Default configurations */\r\n\t\tthis.defaults = {\r\n\t\t    start: 0, \t\t\t\t// Starting number [unit]\r\n\t\t    end: 100, \t\t\t\t// End number [unit]\r\n\t\t    duration: 2000, \t\t// Count duration [milisecond]\r\n\t\t    delay: 10, \t\t\t\t// Count delay [milisecond]\r\n\t\t    once: true, \t\t\t// Counting at once or recount when scroll [boolean]\r\n\t\t\tpulse: false, \t\t\t// Pulse count for certain time [boolean|milisecond]\r\n\t\t    decimals: 0, \t\t\t// Decimal places [unit]\r\n\t\t    legacy: true,           // If this is true it will use the scroll event listener on browsers\r\n\t\t\tfilesizing: false, \t\t// Is it for filesize?\r\n\t\t    currency: false, \t\t// Is it for currency? Use it for set the symbol too [boolean|char|string]\r\n\t\t    separator: false, \t\t\t// Do you want to use thausands separator? use it for set the symbol too [boolean|char|string]\r\n\t\t\tselector: '.purecounter',\t// HTML query selector for spesific element\r\n\t\t};\r\n\t\t/** Set default configuration based on user input */\r\n\t\tthis.configOptions = this.setOptions(options, this.defaults);\r\n\t\t/** Get all elemenets based on default selector */\r\n\t\tthis.elements = document.querySelectorAll(this.configOptions.selector);\r\n\t\t/** Get browser Intersection Listener Support */\r\n\t\tthis.intersectionSupport = this.intersectionListenerSupported();\r\n\t\t/** Initiate event listened */\r\n\t\tthis.registerEventListeners();\r\n\t}\r\n\r\n\t/** This method is for create and merge configuration */\r\n\tsetOptions(config, baseConfig = {}){\r\n\t\t// Create new Config object;\r\n\t\tvar newConfig = {};\r\n\t\t// Loop config items to set it value into newConfig\r\n\t\tfor(var key in config){\r\n\t\t\t// if baseConfig is set, only accept the baseconfig property\r\n\t\t\tif(baseConfig != {} && ! baseConfig.hasOwnProperty(key)) continue;\r\n\t\t\t// var parse the config value\r\n\t\t\tvar val = this.parseValue(config[key]);\r\n\t\t\t// set the newConfig property value\r\n\t\t\tnewConfig[key] = val;\r\n\t\t\t// Exclusive for 'duration' or 'pulse' property, recheck the value\r\n\t\t\t// If it's not a boolean, just set it to milisecond unit\r\n\t\t\tif (key.match(/duration|pulse/)){\r\n\t\t\t\tnewConfig[key] = typeof val != 'boolean' ? val * 1000 : val;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Finally, we can just merge the baseConfig (if any), with newConfig.\r\n\t\treturn Object.assign({}, baseConfig, newConfig);\r\n\t}\r\n\r\n\t/** Initial setup method */\r\n\tregisterEventListeners() {\r\n\t\t/** Get all elements with class 'purecounter' */\r\n\t\tvar elements = this.elements;\r\n\t\t/** Return if no elements */\r\n\t\tif (elements.length === 0) return;\r\n\r\n\t\t/** Run animateElements base on Intersection Support */\r\n\t\tif (this.intersectionSupport) {\r\n\t\t\tvar intersectObserver = new IntersectionObserver(this.animateElements.bind(this), {\r\n\t\t\t\t\"root\": null,\r\n\t\t\t\t\"rootMargin\": '20px',\r\n\t\t\t\t\"threshold\": 0.5\r\n\t\t\t});\r\n\r\n\t\t\telements.forEach(element => {intersectObserver.observe(element);})\r\n\t\t} else {\r\n\t\t\tif (window.addEventListener) {\r\n\t\t\t\tthis.animateLegacy(elements);\r\n\t\t\t\twindow.addEventListener('scroll', function (e) {\r\n\t\t\t\t\tthis.animateLegacy(elements);\r\n\t\t\t\t}, { \"passive\": true });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** This legacy to make Purecounter use very lightweight & fast */\r\n\tanimateLegacy(elements) {\r\n\t\telements.forEach(element => {\r\n\t\t\tvar config = this.parseConfig(element);\r\n\t\t\tif(config.legacy === true && this.elementIsInView(element)) {\r\n\t\t\t\tthis.animateElements([element]);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t/** Main Element Count Animation */\r\n\tanimateElements(elements, observer) {\r\n\t\telements.forEach(element => {\r\n\t\t\tvar elm = element.target || element; // Just make sure which element will be used\r\n\t\t\tvar elementConfig = this.parseConfig(elm); // Get config value on that element\r\n\r\n\t\t\t// If duration is less than or equal zero, just format the 'end' value\r\n\t\t\tif (elementConfig.duration <= 0) {\r\n\t\t\t\treturn elm.innerHTML = this.formatNumber(elementConfig.end, elementConfig);\r\n\t\t\t}\r\n\r\n\t\t\tif ((! observer && ! this.elementIsInView(element)) || (observer && element.intersectionRatio < 0.5)) {\r\n\t\t\t\tvar value = elementConfig.start > elementConfig.end ? elementConfig.end : elementConfig.start;\r\n\t\t\t\treturn elm.innerHTML = this.formatNumber(value, elementConfig);\r\n\t\t\t}\r\n\r\n\t\t\t// If duration is more than 0, then start the counter\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\treturn this.startCounter(elm, elementConfig);\r\n\t\t\t}, elementConfig.delay);\r\n\t\t});\r\n\t}\r\n\r\n\t/** This is the the counter method */\r\n\tstartCounter(element, config) {\r\n\t\t// First, get the increments step\r\n\t\tvar incrementsPerStep = (config.end - config.start) / (config.duration / config.delay);\r\n\t\t// Next, set the counter mode (Increment or Decrement)\r\n\t\tvar countMode = 'inc';\r\n\r\n\t\t// Set mode to 'decrement' and 'increment step' to minus if start is larger than end\r\n\t\tif (config.start > config.end) {\r\n\t\t\tcountMode = 'dec';\r\n\t\t\tincrementsPerStep *= -1;\r\n\t\t}\r\n\r\n\t\t// Next, determine the starting value\r\n\t\tvar currentCount = this.parseValue(config.start);\r\n\t\t// And then print it's value to the page\r\n\t\telement.innerHTML = this.formatNumber(currentCount, config);\r\n\r\n\t\t// If the config 'once' is true, then set the 'duration' to 0\r\n\t\tif (config.once === true){\r\n\t\t\telement.setAttribute('data-purecounter-duration', 0);\r\n\t\t}\r\n\r\n\t\t// Now, start counting with counterWorker using Interval method based on delay\r\n\t\tvar counterWorker = setInterval(() => {\r\n\t\t\t// First, determine the next value base on current value, increment value, and count mode\r\n\t\t\tvar nextNum = this.nextNumber(currentCount, incrementsPerStep, countMode);\r\n\t\t\t// Next, print that value to the page\r\n\t\t\telement.innerHTML = this.formatNumber(nextNum, config);\r\n\t\t\t// Now set that value to the current value, because it's already printed\r\n\t\t\tcurrentCount = nextNum;\r\n\r\n\t\t\t// If the value is larger or less than the 'end' (base on mode), then  print the end value and stop the Interval\r\n\t\t\tif ((currentCount >= config.end && countMode == 'inc') || (currentCount <= config.end && countMode == 'dec')) {\r\n\t\t\t\telement.innerHTML = this.formatNumber(config.end, config);\r\n\t\t\t\t// If 'once' is false and 'pulse' is set\r\n\t\t\t\tif(!config.once && config.pulse){\r\n\t\t\t\t\t// First set the 'duration' to zero\r\n\t\t\t\t\telement.setAttribute('data-purecounter-duration', 0);\r\n\t\t\t\t\t// Next, use timeout to reset it duration back based on 'pulse' config\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\telement.setAttribute('data-purecounter-duration', (config.duration / 1000));\r\n\t\t\t\t\t}, config.pulse);\r\n\t\t\t\t}\r\n\t\t\t\t// Now, we can close the conterWorker peacefully\r\n\t\t\t\tclearInterval(counterWorker);\r\n\t\t\t}\r\n\t\t}, config.delay);\r\n\t}\r\n\r\n\t/** This method is to generate the element Config */\r\n\tparseConfig(element) {\r\n\t\t// Next, get all 'data-precounter-*' attributes value. Store to array\r\n\t\tvar configValues = [].filter.call(element.attributes, function(attr) {\r\n\t\t\treturn /^data-purecounter-/.test(attr.name);\r\n\t\t});\r\n\r\n\t\t// Now, we create element config as an object\r\n\t\tvar elementConfig = configValues.length != 0 ? Object.assign({}, ...configValues.map(({name, value}) => {\r\n\t\t\tvar key = name.replace('data-purecounter-', '').toLowerCase(),\r\n\t\t\t\tval = this.parseValue(value);\r\n\r\n\t\t\treturn {[key] : val};\r\n\t\t})) : {};\r\n\r\n\t\t// Last setOptions and return\r\n\t\treturn this.setOptions(elementConfig, this.configOptions);\r\n\t}\r\n\r\n\t/** This method is to get the next number */\r\n\tnextNumber(number, steps, mode = 'inc') {\r\n\t\t// First, get the exact value from the number and step (int or float)\r\n\t\tnumber = this.parseValue(number);\r\n\t\tsteps = this.parseValue(steps);\r\n\r\n\t\t// Last, get the next number based on current number, increment step, and count mode\r\n\t\t// Always return it as float\r\n\t\treturn parseFloat(mode === 'inc' ? (number + steps) : (number - steps));\r\n\t}\r\n\r\n\t/** This method is to get the converted number */\r\n\tconvertNumber (number, config) {\r\n\t\t/** Use converter if filesizing or currency is on */\r\n\t\tif (config.filesizing || config.currency) {\r\n\t\t\tnumber = Math.abs(Number(number)); // Get the absolute value of number\r\n\r\n\t\t\tvar baseNumber = 1000, // Base multiplying treshold\r\n\t\t\t\tsymbol = config.currency && typeof config.currency === 'string' ? config.currency : \"\", // Set the Currency Symbol (if any)\r\n\t\t\t\tlimit = config.decimals || 1, // Set the decimal limit (default is 1)\r\n\t\t\t\tunit = ['', 'K', 'M', 'B', 'T'], // Number unit based exponent threshold\r\n\t\t\t\tvalue = ''; // Define value variable\r\n\r\n\t\t\t/** Changes base number and its unit for filesizing */\r\n\t\t\tif (config.filesizing) {\r\n\t\t\t\tbaseNumber = 1024; // Use 1024 instead of 1000\r\n\t\t\t\tunit = ['bytes', 'KB', 'MB', 'GB', 'TB']; // Change to 'bytes' unit\r\n\t\t\t}\t\t\r\n\r\n\t\t\t/** Set value based on the threshold */\r\n\t\t\tfor(var i = 4; i >= 0; i--){\r\n\t\t\t\t// If the exponent is 0\r\n\t\t\t\tif(i === 0) value = `${number.toFixed(limit)} ${unit[i]}`;\r\n\t\t\t\t// If the exponent is above zero\r\n\t\t\t\tif(number >= this.getFilesizeThreshold(baseNumber, i)) {\r\n\t\t\t\t\tvalue = `${(number / this.getFilesizeThreshold(baseNumber, i)).toFixed(limit)} ${unit[i]}`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Apply symbol before the value and return it as string\r\n\t\t\treturn symbol + value;\r\n\t\t} else {\r\n\t\t\t/** Return its value as float if not using filesizing or currency*/\r\n\t\t\treturn parseFloat(number);\r\n\t\t}\r\n\t}\r\n\r\n\t/** This method will get the given base.  */\r\n\tgetFilesizeThreshold(baseNumber, index) {\r\n\t\treturn Math.pow(baseNumber, index);\r\n\t}\r\n\r\n\t/** This method is to get the last formated number */\r\n\tapplySeparator(value, config){\r\n\t\t// If config separator is false, delete all separator\r\n\t\tif (! config.separator) {\r\n\t\t\treturn value.replace(new RegExp(/,/gi, 'gi'), '')\r\n\t\t}\r\n\t\t// Set the separator symbol.\r\n\t\t// If 'separator' is string, than use the separator.\r\n\t\t// If 'separator' is boolean value for 'true', just set it default to comma (,)\r\n\t\tvar symbol = typeof config.separator === 'string' ? config.separator : ',';\r\n\t\t// If config separator is true, then create separator\r\n\t\treturn value.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")\r\n\t\t\t.replace(new RegExp(/,/gi, 'gi'), symbol)\r\n\t}\r\n\r\n\t/** This method is to get formated number to be printed in the page */\r\n\tformatNumber(number, config) {\r\n\t\t// This is the configuration for 'toLocaleString' method\r\n\t\tvar strConfig = {minimumFractionDigits: config.decimals, maximumFractionDigits: config.decimals};\r\n\t\t// Set and convert the number base on its config.\r\n\t\tnumber = this.convertNumber(number, config);\r\n\r\n\t\t// Last, apply the number separator using number as string\r\n\t\treturn this.applySeparator(number.toLocaleString(undefined, strConfig), config);\r\n\t}\r\n\r\n\t/** This method is to get the parsed value */\r\n\tparseValue(data) {\r\n\t\t// If number with dot (.), will be parsed as float\r\n\t\tif (/^[0-9]+\\.[0-9]+$/.test(data)) {\r\n\t\t\treturn parseFloat(data);\r\n\t\t}\r\n\t\t// If just number, will be parsed as integer\r\n\t\tif (/^[0-9]+$/.test(data)) {\r\n\t\t\treturn parseInt(data);\r\n\t\t}\r\n\t\t// If it's boolean string, will be parsed as boolean\r\n\t\tif (/^true|false/i.test(data)) {\r\n\t\t\treturn /^true/i.test(data);\r\n\t\t}\r\n\t\t// Return it's value as default\r\n\t\treturn data;\r\n\t}\r\n\r\n\t/** This method is to detect the element is in view or not. */\r\n\telementIsInView(element) {\r\n\t\tvar top = element.offsetTop;\r\n\t\tvar left = element.offsetLeft;\r\n\t\tvar width = element.offsetWidth;\r\n\t\tvar height = element.offsetHeight;\r\n\r\n\t\twhile (element.offsetParent) {\r\n\t\t\telement = element.offsetParent;\r\n\t\t\ttop += element.offsetTop;\r\n\t\t\tleft += element.offsetLeft;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\ttop >= window.pageYOffset &&\r\n\t\t\tleft >= window.pageXOffset &&\r\n\t\t\t(top + height) <= (window.pageYOffset + window.innerHeight) &&\r\n\t\t\t(left + width) <= (window.pageXOffset + window.innerWidth)\r\n\t\t);\r\n\t}\r\n\r\n\t/** Just some condition to check browser Intersection Support */\r\n\tintersectionListenerSupported() {\r\n\t\treturn ('IntersectionObserver' in window) &&\r\n\t\t\t('IntersectionObserverEntry' in window) &&\r\n\t\t\t('intersectionRatio' in window.IntersectionObserverEntry.prototype);\r\n\t}\r\n}","// require PureCounter from './js/purecounter.js';\r\n// Store it as consant\r\nconst PureCounter = require('./js/purecounter').default;\r\n\r\n// Set module Export to PureCounter class, so it can be initialize as class\r\nmodule.exports = PureCounter;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(634);\n"],"names":["root","factory","exports","module","define","amd","self","PureCounter","options","this","defaults","start","end","duration","delay","once","pulse","decimals","legacy","filesizing","currency","separator","selector","configOptions","setOptions","elements","document","querySelectorAll","intersectionSupport","intersectionListenerSupported","registerEventListeners","config","baseConfig","newConfig","key","hasOwnProperty","val","parseValue","match","Object","assign","length","intersectObserver","IntersectionObserver","animateElements","bind","forEach","element","observe","window","addEventListener","animateLegacy","e","parseConfig","elementIsInView","observer","elm","target","elementConfig","innerHTML","formatNumber","intersectionRatio","value","setTimeout","startCounter","incrementsPerStep","countMode","currentCount","setAttribute","counterWorker","setInterval","nextNum","nextNumber","clearInterval","configValues","filter","call","attributes","attr","test","name","map","replace","toLowerCase","number","steps","mode","parseFloat","Math","abs","Number","baseNumber","symbol","limit","unit","i","toFixed","getFilesizeThreshold","index","pow","RegExp","strConfig","minimumFractionDigits","maximumFractionDigits","convertNumber","applySeparator","toLocaleString","undefined","data","parseInt","top","offsetTop","left","offsetLeft","width","offsetWidth","height","offsetHeight","offsetParent","pageYOffset","pageXOffset","innerHeight","innerWidth","IntersectionObserverEntry","prototype","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","d","definition","o","defineProperty","enumerable","get","obj","prop"],"sourceRoot":""}